;;; Вычисление остатка от деления.
(defun % (val base / temp)
  (setq temp (/ val base))
  (- val (* temp base))
)

;;;Предстасление целого числа val в виде списка,
;;;элементами которого являются значения разрядов числа val в системе счисления с основанием base.
;;;
;;;_$ (разложение_по_основанию 123 10)
;;;(1 2 3)
;;;_$ (разложение_по_основанию 123 8)
;;;(1 7 3)
;;;_$ (разложение_по_основанию 123 2)
;;;(1 1 1 1 0 1 1)
;;;_$ (разложение_по_основанию 123 16)
;;;(7 11)
(defun разложение_по_основанию (val						;Целое положительное число
				base						;основание системы счисления
				/ ost lst)
  (setq	val  (fix val)
	base (fix base)
  )
  (cond
    ((= val 0)
     (setq lst '(0))
    )
    ((> val 0)
     (while (> val 0)
       (setq ost (% val base)
	     val (/ val base)
	     lst (cons ost lst)
       )
     )
    )
  )
)




;;;Производит вычисление целого числа по представляющему его списку разрядов.
;;;_$ (КОМПОЗИЦИЯ_ПО_ОСНОВАНИЮ '(1 2 3 6 5 2 0 4) 10)
;;;12365204
(defun композиция_по_основанию (lst						;список разряlов
				base						;Основание системы счисления
				/ ln sc	sum)
  (setq
    ln	(length lst)
    sc	1
    sum	0
  )
  (while (> ln 0)
    (setq
      ln  (1- ln)
      sum (+ sum (* sc (nth ln lst)))
      sc  (* sc base)
    )
  )
  sum
)

;;;Преобразует строку символов str, представляющую целое число,
;;;представленное в системе счисления с основанием base,
;;;в целое число.
;;;
;;;_$ (СТРОКА->ЦЕЛОЕ "123" "0" 4)
;;;27
;;;_$ (СТРОКА->ЦЕЛОЕ "123" "0" 10)
;;;123
(defun строка->целое  (str              ;Преобразуемая строка
                       base_chr         ;Начальноый символ в системе счисления
                       base             ;основание системы счисления
                       / delta el lst lst-i lst-len lst-rez)
  (setq delta (ascii base_chr))
  (композиция_по_основанию
    (progn (setq lst     (vl-string->list str)
                 lst-len (length lst)
                 lst-i   -1)
           (while (< (setq lst-i (1+ lst-i)) lst-len)
             (setq el      (nth lst-i lst)
                   lst-rez (cons (progn (- el delta)) lst-rez)))
           (setq lst-rez (reverse lst-rez)))
    base))

;;;Производит преобразование целого числа в строку символов
;;;_$ (целое_строка 123 "0" 10)
;;;"123"
(defun целое->строка  (i                ;Преобразуемое целое положительное число
                       base_chr         ;Начальноый символ в системе счисления
                       base             ;основание системы счисления
                       / el lst lst-i lst-len lst-rez)
  (apply (function strcat)
         (progn (setq lst     (РАЗЛОЖЕНИЕ_ПО_ОСНОВАНИЮ i base)
                      lst-len (length lst)
                      lst-i   -1)
                (while (< (setq lst-i (1+ lst-i)) lst-len)
                  (setq el      (nth lst-i lst)
                        lst-rez (cons (progn (ЦЕЛОЕ->СИМВОЛ el base_chr)) lst-rez)))
                (setq lst-rez (reverse lst-rez)))))

;(macro-mapcar '(mapcar (function (lambda (el) (целое->символ el base_chr))) (разложение_по_основанию i base)))

;;;Используется внутренне функцией целое->строка.
;;;_$ (целое->символ 0 "A")
;;;"A"
;;;_$ (целое->символ 5 "A")
;;;"F"
(defun целое->символ (i base_chr)
  (chr (+ (ascii base_chr) i))
)
